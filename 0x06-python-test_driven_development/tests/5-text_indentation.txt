The 5-text_indentation Module:

    >>> text_indentation = __import__("5-text_indentation").text_indentation

Make Sure Documentation Exists:

    >>> module_documentation = __import__("5-text_indentation").__doc__
    >>> print(len(module_documentation) > 0)
    True

    >>> function_documentation = __import__("5-text_indentation").text_indentation.__doc__
    >>> print(len(function_documentation) > 0)
    True

    >>> t="Hello. I am a string? Here is what you should do: parse me."

Correct Usage:

    >>> text_indentation(t)
    Hello.
    <BLANKLINE>
    I am a string?
    <BLANKLINE>
    Here is what you should do:
    <BLANKLINE>
    parse me.
    <BLANKLINE>
    <BLANKLINE>

    >>> t="Hello. : \nI am a string? .\n"
    >>> text_indentation(t)
    Hello.
    <BLANKLINE>
    :
    <BLANKLINE>
    <BLANKLINE>
    I am a string?
    <BLANKLINE>
    .
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>

    >>> t=" : . ? "
    >>> text_indentation(t)
    :
    <BLANKLINE>
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    <BLANKLINE>

    >>> t = "    MY SPOON IS TOO BIG!...    I am a banana.\n     blearg    "
    >>> text_indentation(t)
    MY SPOON IS TOO BIG!.
    <BLANKLINE>
    .
    <BLANKLINE>
    .
    <BLANKLINE>
    I am a banana.
    <BLANKLINE>
    <BLANKLINE>
    blearg

    >>> t = "Mwa" + "ha" * 2 + u'\u2020'
    >>> text_indentation(t)
    MwahahaÍ°

On Errors:

    >>> text_indentation(4)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation(-4)
    Traceback (most recent call last):
    TypeError: text must be a string
